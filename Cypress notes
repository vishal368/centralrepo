We have a two type of assertion.

1. Implicit assertion. [ should ] [ and ] //this is built in assertion 

keywords

eq
contain
include
exist
have.length
have.value
etc...

2. explicit assertion [ expect -- BDD] [ assert --TDD]

Lets go with should , and assertion 


describe ("assertion demo", () =>{

it("implicit assertion", () =>{


cy.visit("https://opensource-demo.orangehrmlive.com/web/index.php/auth/login")

cy.url{}.should('include','Oranger') // first we capture the url of web page and now we use URl function // include is a keyword // OrangeHRM is a part of URL upper mention. we check organehrm is a part of url )

cy.url{}.should('eq','https://opensource-demo.orangehrmlive.com/web/index.php/auth/login' ) // eq is equal

cy.url{}.should('conatin', 'orangehrm') // we check it "ornagehrm' in the URL
.should('conatin', 'orangehrm') // we check it "ornagehrm' in the URL // take a upper qualities 
.should('conatin', 'orangehrm') // we check it "ornagehrm' in the URL // take a upper qualities // similler .and work 
.and('conatin', 'orangehrm') // we check it "ornagehrm' in the URL // take a upper qualities 

cy.title{}.should('include','orange' // title check value of title of current web page.
.and('eq', 'orangehrm'
.and('contain',"HRm")

cy.get('.orange-login-branding>img').should('be.visible') // here we check logo is visible or not
.and('exist') // here we check it element is exists or not

})

})




------------------------------------------------------------------------------------------------

4. What are Cypress Commands?
Answer: Cypress provides several built-in commands to interact with web elements and perform various actions during test execution. Some common commands include:

cy.visit(url) – Opens the given URL.
cy.get(selector) – Finds a DOM element using a CSS selector.
cy.click() – Clicks on a specified element.
cy.type(text) – Types a text string into an input field.
cy.contains(text) – Finds an element that contains a specific text.

5. What is a Cypress Test?
Answer: A test in Cypress is written using Mocha syntax. It involves writing describe blocks (test suites) and it blocks (individual tests). For example:

javascript
Copy code
describe('My First Test', () => {
  it('Visits the Cypress website', () => {
    cy.visit('https://www.cypress.io');
    cy.contains('Cypress').should('be.visible');
  });
});

6. What is the difference between cy.get() and cy.contains()?
Answer:

cy.get(selector) is used to locate elements by a CSS selector.
cy.contains(text) is used to find elements by text content (can be a partial match). It's often used to find elements like buttons or links based on their visible text.

7. How do you handle asynchronous behavior in Cypress?
Answer: Cypress automatically waits for elements to become available and perform actions once they are ready. You don’t need to use setTimeout() or wait() like you would in some other frameworks. Cypress uses automatic retries to handle asynchronous behavior, and you can chain commands together so they execute sequentially.

8. What are Fixtures in Cypress?
Answer: Fixtures in Cypress are external files (usually JSON or text files) used to store data that can be used in your tests. This data can be used to mock API responses or to provide consistent test input.

You can load a fixture with:
javascript
Copy code
cy.fixture('data.json').then((data) => {
  // Use 'data' in your test
});



0. What are Cypress Hooks?
Answer: Hooks are functions that allow you to set up preconditions before tests (before(), beforeEach()) or clean up after tests (after(), afterEach()).

before() runs once before all tests.
beforeEach() runs before each test.
after() runs once after all tests.
afterEach() runs after each test.
Example:

javascript
Copy code
beforeEach(() => {
  cy.visit('https://example.com');
});

13. How do you run a specific Cypress test?
Answer: You can specify a particular test file to run by providing the path to the test file:

bash
Copy code
npx cypress run --spec "cypress/integration/my-test-file.spec.js"
14. How do you debug failing tests in Cypress?
Answer: Cypress provides several ways to debug tests:

Command Log: The Cypress UI shows a log of each command as it is executed, including the DOM state after each step.
cy.pause(): You can pause the test execution at any point to inspect the state.
Console logs: Cypress automatically logs relevant information to the browser’s console.
Screenshots and videos: Cypress can capture screenshots and videos of tests that fail, which can be useful for debugging.


15. What is the cy.wait() command used for?
Answer: The cy.wait() command is used to delay the execution of the test. It can be used to wait for a certain amount of time or to wait for specific network requests to complete. Example:

javascript
Copy code
cy.wait(500); // Waits for 500ms
cy.wait('@getData'); // Wait for a network request



Here is a list of commonly used **Cypress commands** for various tasks like interacting with the DOM, handling network requests, assertions, and more.

### **1. General Commands**
- **`cy.visit(url)`**: Opens a URL in the browser.
  ```javascript
  cy.visit('https://example.com');
  ```

- **`cy.get(selector)`**: Finds an element by a CSS selector.
  ```javascript
  cy.get('.button');
  ```

- **`cy.contains(text)`**: Finds an element containing specific text.
  ```javascript
  cy.contains('Submit');
  ```

- **`cy.click()`**: Clicks on an element.
  ```javascript
  cy.get('.button').click();
  ```

- **`cy.type(text)`**: Types text into an input or textarea.
  ```javascript
  cy.get('input[name="username"]').type('myuser');
  ```

- **`cy.clear()`**: Clears the value of an input or textarea.
  ```javascript
  cy.get('input[name="username"]').clear();
  ```

- **`cy.select(value)`**: Selects an option from a dropdown.
  ```javascript
  cy.get('select').select('Option 1');
  ```

- **`cy.scrollTo(position)`**: Scrolls the page to a specific position.
  ```javascript
  cy.scrollTo('bottom'); // Scrolls to the bottom
  ```

- **`cy.focus()`**: Sets focus on an element.
  ```javascript
  cy.get('input[name="username"]').focus();
  ```

- **`cy.blur()`**: Removes focus from an element.
  ```javascript
  cy.get('input[name="username"]').blur();
  ```

### **2. Assertion Commands**
- **`cy.should('have.text', 'Text')`**: Asserts that an element has a specific text.
  ```javascript
  cy.get('h1').should('have.text', 'Welcome');
  ```

- **`cy.should('be.visible')`**: Asserts that an element is visible.
  ```javascript
  cy.get('.button').should('be.visible');
  ```

- **`cy.should('not.exist')`**: Asserts that an element does not exist.
  ```javascript
  cy.get('.nonexistent').should('not.exist');
  ```

- **`cy.should('have.class', 'active')`**: Asserts that an element has a specific class.
  ```javascript
  cy.get('.button').should('have.class', 'active');
  ```

- **`cy.should('be.checked')`**: Asserts that a checkbox or radio button is checked.
  ```javascript
  cy.get('input[type="checkbox"]').should('be.checked');
  ```

- **`cy.should('have.value', 'value')`**: Asserts that an input field has a specific value.
  ```javascript
  cy.get('input[name="username"]').should('have.value', 'myuser');
  ```

### **3. Navigation and Window Commands**
- **`cy.reload()`**: Reloads the current page.
  ```javascript
  cy.reload();
  ```

- **`cy.go(direction)`**: Navigates backward or forward in browser history.
  ```javascript
  cy.go('back'); // Navigate back
  cy.go('forward'); // Navigate forward
  ```

- **`cy.wait(time)`**: Waits for a specified time (in milliseconds).
  ```javascript
  cy.wait(1000); // Waits for 1 second
  ```

- **`cy.location()`**: Gets the current URL and other location properties.
  ```javascript
  cy.location('pathname').should('eq', '/home');
  ```

### **4. Network Commands**
- **`cy.intercept(url)`**: Intercepts network requests to stub or modify responses.
  ```javascript
  cy.intercept('GET', '/api/data').as('getData');
  ```

- **`cy.wait(alias)`**: Waits for an intercepted request or alias to complete.
  ```javascript
  cy.wait('@getData');
  ```

- **`cy.route(method, url, response)`**: Stub network responses (deprecated in favor of `cy.intercept()`).
  ```javascript
  cy.route('GET', '/api/data', 'fixture:data.json').as('getData');
  ```

### **5. File Handling**
- **`cy.fixture(filename)`**: Loads a fixture file for use in tests.
  ```javascript
  cy.fixture('data.json').then((data) => {
    // Use the 'data' object in your test
  });
  ```

- **`cy.readFile(filePath)`**: Reads the contents of a file.
  ```javascript
  cy.readFile('cypress/fixtures/data.json').should('not.be.empty');
  ```

- **`cy.writeFile(filePath, content)`**: Writes content to a file.
  ```javascript
  cy.writeFile('cypress/fixtures/data.json', { name: 'John' });
  ```

### **6. Assertions with Chai**
- **`expect(value).to.be.equal('value')`**: Basic Chai assertion for equality.
  ```javascript
  expect(2 + 2).to.equal(4);
  ```

- **`assert(value === 'value')`**: Another way to assert using Chai's `assert` method.
  ```javascript
  assert.equal(2 + 2, 4);
  ```

### **7. Time-based Commands**
- **`cy.clock()`**: Freezes the time for controlling timers (e.g., `setTimeout`, `setInterval`).
  ```javascript
  cy.clock();
  ```

- **`cy.tick(milliseconds)`**: Advances time by the specified number of milliseconds.
  ```javascript
  cy.tick(1000); // Advances time by 1 second
  ```

- **`cy.tick(ms)`**: Advances the clock by a set number of milliseconds (typically used after `cy.clock()`).
  ```javascript
  cy.clock();
  cy.tick(1000); // Moves time forward by 1 second
  ```

### **8. Retry Commands**
- **`cy.retry()`**: Retries commands that fail due to asynchronous timing issues.
  ```javascript
  cy.get('.element').should('be.visible').retry();
  ```

### **9. Custom Commands**
You can also create **custom commands** in Cypress for reuse across tests.

- Example of a custom command:
  ```javascript
  Cypress.Commands.add('login', (username, password) => {
    cy.get('input[name="username"]').type(username);
    cy.get('input[name="password"]').type(password);
    cy.get('button[type="submit"]').click();
  });
  ```

Usage of the custom command:
```javascript
cy.login('myuser', 'mypassword');
```

---

Here is a **comprehensive list of all Cypress commands** categorized by functionality. Cypress provides a lot of commands to handle different aspects of end-to-end testing, from DOM interaction to network stubbing and more.

---

### **1. General Commands**
These commands are used for general test execution, navigation, and interaction with elements.

- **`cy.visit(url)`**: Navigate to a URL.
  ```javascript
  cy.visit('https://example.com');
  ```

- **`cy.get(selector)`**: Get one or more DOM elements by a CSS selector.
  ```javascript
  cy.get('button');
  ```

- **`cy.contains(text)`**: Get DOM elements containing specific text.
  ```javascript
  cy.contains('Submit');
  ```

- **`cy.click()`**: Click on an element.
  ```javascript
  cy.get('.button').click();
  ```

- **`cy.dblclick()`**: Double-click an element.
  ```javascript
  cy.get('.button').dblclick();
  ```

- **`cy.type(text)`**: Type a string of text into an input or textarea.
  ```javascript
  cy.get('input[name="username"]').type('user');
  ```

- **`cy.clear()`**: Clear the value of an input element.
  ```javascript
  cy.get('input[name="username"]').clear();
  ```

- **`cy.focus()`**: Focus on an element.
  ```javascript
  cy.get('input[name="username"]').focus();
  ```

- **`cy.blur()`**: Remove focus from an element.
  ```javascript
  cy.get('input[name="username"]').blur();
  ```

- **`cy.select(value)`**: Select an option from a dropdown (select element).
  ```javascript
  cy.get('select').select('Option 1');
  ```

- **`cy.scrollTo(position)`**: Scroll to a specific position within an element or the page.
  ```javascript
  cy.scrollTo('bottom');
  ```

- **`cy.screenshot()`**: Capture a screenshot of the application.
  ```javascript
  cy.screenshot();
  ```

- **`cy.pause()`**: Pause test execution to inspect the app manually.
  ```javascript
  cy.pause();
  ```

- **`cy.wait(time)`**: Wait for a specific amount of time (in milliseconds).
  ```javascript
  cy.wait(2000);
  ```

- **`cy.reload()`**: Reload the current page.
  ```javascript
  cy.reload();
  ```

- **`cy.go(direction)`**: Go back or forward in browser history.
  ```javascript
  cy.go('back'); // go back
  cy.go('forward'); // go forward
  ```

- **`cy.location()`**: Get information about the current URL, pathname, etc.
  ```javascript
  cy.location('href').should('include', 'example.com');
  ```

### **2. Assertions**
Assertions are used to verify expected behavior and outcomes in tests.

- **`cy.should('have.text', 'Text')`**: Assert that an element contains the specified text.
  ```javascript
  cy.get('h1').should('have.text', 'Welcome');
  ```

- **`cy.should('be.visible')`**: Assert that an element is visible.
  ```javascript
  cy.get('.button').should('be.visible');
  ```

- **`cy.should('not.exist')`**: Assert that an element does not exist in the DOM.
  ```javascript
  cy.get('.nonexistent').should('not.exist');
  ```

- **`cy.should('have.class', 'className')`**: Assert that an element has the given class.
  ```javascript
  cy.get('.button').should('have.class', 'active');
  ```

- **`cy.should('have.value', 'value')`**: Assert that an input or textarea has a specific value.
  ```javascript
  cy.get('input[name="username"]').should('have.value', 'user');
  ```

- **`cy.should('not.be.checked')`**: Assert that a checkbox or radio button is not checked.
  ```javascript
  cy.get('input[type="checkbox"]').should('not.be.checked');
  ```

- **`cy.should('be.enabled')`**: Assert that an element is enabled.
  ```javascript
  cy.get('button').should('be.enabled');
  ```

- **`cy.should('have.attr', 'attribute')`**: Assert that an element has a specific attribute.
  ```javascript
  cy.get('img').should('have.attr', 'src');
  ```

### **3. Network Commands**
These commands allow you to work with network requests, intercepting them or stubbing responses.

- **`cy.intercept()`**: Intercepts network requests and allows you to modify or stub responses.
  ```javascript
  cy.intercept('GET', '/api/data').as('getData');
  ```

- **`cy.wait(alias)`**: Waits for an alias of a request or route to complete.
  ```javascript
  cy.wait('@getData');
  ```

- **`cy.route(method, url, response)`**: Stub a network request with a custom response (deprecated, use `cy.intercept()`).
  ```javascript
  cy.route('GET', '/api/data', 'fixture:data.json').as('getData');
  ```

- **`cy.fixture()`**: Load data from a fixture file to use in your test.
  ```javascript
  cy.fixture('data.json').then((data) => {
    // Use the 'data' object in your test
  });
  ```

### **4. Window/Browser Commands**
Commands that control browser behavior.

- **`cy.window()`**: Access the browser's `window` object to interact with the global window.
  ```javascript
  cy.window().should('have.property', 'location');
  ```

- **`cy.document()`**: Access the browser's `document` object.
  ```javascript
  cy.document().should('have.property', 'title');
  ```

- **`cy.title()`**: Get the title of the page.
  ```javascript
  cy.title().should('include', 'Cypress');
  ```

### **5. File Commands**
Commands for handling files during tests.

- **`cy.readFile(filePath)`**: Read the contents of a file.
  ```javascript
  cy.readFile('cypress/fixtures/data.json').should('not.be.empty');
  ```

- **`cy.writeFile(filePath, content)`**: Write data to a file.
  ```javascript
  cy.writeFile('cypress/fixtures/output.json', { name: 'John' });
  ```

- **`cy.upload()`**: (Custom Command) Used to upload a file to an input.
  ```javascript
  cy.upload('input[type="file"]', 'cypress/fixtures/test.jpg');
  ```

### **6. Time Manipulation Commands**
Commands to manipulate time and timing behaviors.

- **`cy.clock()`**: Freeze the browser's clock to control time-based behavior.
  ```javascript
  cy.clock();
  ```

- **`cy.tick(ms)`**: Advances the clock by the specified number of milliseconds.
  ```javascript
  cy.tick(2000); // Move time forward by 2 seconds
  ```

### **7. Command Chains**
Cypress supports command chaining, where multiple commands can be chained together. For example:

```javascript
cy.get('input[name="username"]').type('myuser').should('have.value', 'myuser');
```

### **8. Miscellaneous Commands**
- **`cy.debug()`**: Pause execution and log details to the console.
  ```javascript
  cy.debug();
  ```

- **`cy.spy()`**: Spy on a function to monitor its calls.
  ```javascript
  const spy = cy.spy();
  cy.get('.button').click(spy);
  ```

- **`cy.stub()`**: Replace a function with a stub that can be controlled and asserted.
  ```javascript
  const stub = cy.stub();
  cy.get('.button').click(stub);
  ```

- **`cy.log()`**: Log a custom message to the Cypress Command Log.
  ```javascript
  cy.log('This is a log message');
  ```

- **`cy.task()`**: Run a custom task defined in the `plugins/index.js` file.
  ```javascript
  cy.task('myCustomTask', { foo: 'bar' });
  ```

- **`cy.then(callback)`**: Continue executing after a set of commands completes.
  ```javascript
  cy.get('button').click().then(() => {
    console.log('Button clicked');
  });
  ```

- **`cy.each()`**: Iterate over a collection of elements or array.
  ```javascript
  cy.get('li').each(($el, index) => {
    // perform actions on each item
  });
  ```

### **9. Custom Commands**
You can also create custom commands for reusable functionality.

```javascript
Cypress.Commands.add('login', (username, password) => {
  cy.get('input[name="username"]').type(username);
  cy.get('input[name="password"]').type(password);
  cy.get('button[type="submit"]').click();
});
```

Usage:
```javascript
cy.login('myuser', 'mypassword');
```

---

### **10. Cypress Runner**
- **`cy.run()`**: Runs a specific test or set of tests (used in CI/CD pipelines).
  ```bash
  n
